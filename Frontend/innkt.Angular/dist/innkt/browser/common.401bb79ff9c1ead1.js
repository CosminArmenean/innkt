"use strict";(self.webpackChunkinnkt=self.webpackChunkinnkt||[]).push([[76],{487:(g,l,r)=>{r.d(l,{f:()=>S});var i=r(4412),d=r(605),c=r(6354),n=r(9437);var p=r(2615),f=r(9330);let S=(()=>{var m;class o{constructor(t){this.http=t,this.baseUrl="http://localhost:5006/api/ThreatDetection",this.activeThreatsSubject=new i.t([]),this.incidentsSubject=new i.t([]),this.metricsSubject=new i.t(null),this.patternsSubject=new i.t([]),this.isMonitoringSubject=new i.t(!1),this.activeThreats$=this.activeThreatsSubject.asObservable(),this.incidents$=this.incidentsSubject.asObservable(),this.metrics$=this.metricsSubject.asObservable(),this.patterns$=this.patternsSubject.asObservable(),this.isMonitoring$=this.isMonitoringSubject.asObservable(),this.initializeService()}initializeService(){this.loadThreatMetrics(),this.loadActiveIncidents(),this.loadThreatPatterns()}startMonitoring(t=3e4){this.monitoringInterval&&clearInterval(this.monitoringInterval),this.isMonitoringSubject.next(!0),this.monitoringInterval=(0,d.Y)(t).subscribe(()=>{this.refreshThreatData()})}stopMonitoring(){this.monitoringInterval&&(clearInterval(this.monitoringInterval),this.monitoringInterval=void 0),this.isMonitoringSubject.next(!1)}analyzeRequest(t){return this.http.post(`${this.baseUrl}/analyze`,t).pipe((0,c.T)(e=>({...e,analyzedAt:new Date(e.analyzedAt)})),(0,n.W)(e=>{throw console.error("Error analyzing threat:",e),e}))}detectAnomalies(t,e,s,a,v){const b={userId:t,ipAddress:e,endpoint:s,from:a.toISOString(),to:v.toISOString(),type:1};return this.http.post(`${this.baseUrl}/anomaly/detect`,b)}executeAutomatedResponse(t,e,s){const a={incidentId:t,threatLevel:this.mapThreatLevel(e),actions:s,requireConfirmation:!1,parameters:{block_duration:15,notification_level:"high"}};return this.http.post(`${this.baseUrl}/response/execute`,a)}loadThreatMetrics(){const t=new Date;t.setDate(t.getDate()-7);const e=new Date;this.http.get(`${this.baseUrl}/metrics`,{params:{from:t.toISOString(),to:e.toISOString()}}).subscribe({next:s=>{this.metricsSubject.next({...s,generatedAt:new Date(s.generatedAt),trends:s.trends.map(a=>({...a,date:new Date(a.date)}))})},error:s=>{console.error("Error loading threat metrics:",s)}})}loadActiveIncidents(){this.http.get(`${this.baseUrl}/incidents/active`).subscribe({next:t=>{this.incidentsSubject.next(t.map(e=>({...e,createdAt:new Date(e.createdAt),resolvedAt:e.resolvedAt?new Date(e.resolvedAt):void 0})))},error:t=>{console.error("Error loading active incidents:",t)}})}loadThreatPatterns(){this.http.get(`${this.baseUrl}/patterns`).subscribe({next:t=>{this.patternsSubject.next(t.map(e=>({...e,createdAt:new Date(e.createdAt),lastUpdated:e.lastUpdated?new Date(e.lastUpdated):void 0})))},error:t=>{console.error("Error loading threat patterns:",t)}})}createIncident(t,e,s,a,v){const b={title:t,description:e,severity:this.mapThreatLevel(s),assignedTo:a,tags:v,metadata:{}};return this.http.post(`${this.baseUrl}/incidents`,b).pipe((0,c.T)(h=>({...h,createdAt:new Date(h.createdAt),resolvedAt:h.resolvedAt?new Date(h.resolvedAt):void 0})))}updateIncidentStatus(t,e){return this.http.put(`${this.baseUrl}/incidents/${t}/status`,{status:e})}refreshThreatData(){this.loadThreatMetrics(),this.loadActiveIncidents()}mapThreatLevel(t){switch(t.toLowerCase()){case"low":default:return 1;case"medium":return 2;case"high":return 3;case"critical":return 4}}getThreatLevelColor(t){switch(t.toLowerCase()){case"low":return"#28a745";case"medium":return"#ffc107";case"high":return"#fd7e14";case"critical":return"#dc3545";default:return"#6c757d"}}getThreatLevelIcon(t){switch(t.toLowerCase()){case"low":return"shield-check";case"medium":return"shield-exclamation";case"high":return"shield-x";case"critical":return"exclamation-triangle";default:return"shield"}}ngOnDestroy(){this.stopMonitoring()}static#t=m=()=>(this.\u0275fac=function(e){return new(e||o)(p.KVO(f.Qq))},this.\u0275prov=p.jDH({token:o,factory:o.\u0275fac,providedIn:"root"}))}return m(),o})()},605:(g,l,r)=>{r.d(l,{Y:()=>c});var i=r(3236),d=r(1584);function c(n=0,u=i.E){return n<0&&(n=0),(0,d.O)(n,n,u)}}}]);