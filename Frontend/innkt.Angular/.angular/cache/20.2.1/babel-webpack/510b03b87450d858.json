{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport let UserService = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class UserService {\n    constructor(http, authService) {\n      this.http = http;\n      this.authService = authService;\n      this.API_BASE_URL = 'https://localhost:5002/api'; // Frontier service\n      this.userProfileSubject = new BehaviorSubject(null);\n      this.userStatsSubject = new BehaviorSubject(null);\n      this.userProfile$ = this.userProfileSubject.asObservable();\n      this.userStats$ = this.userStatsSubject.asObservable();\n    }\n    // Get user profile by ID\n    getUserProfile(userId) {\n      return this.http.get(`${this.API_BASE_URL}/users/${userId}`).pipe(tap(user => {\n        if (user.id === this.authService.getCurrentUser()?.id) {\n          this.userProfileSubject.next(user);\n        }\n      }));\n    }\n    // Get current user's profile\n    getCurrentUserProfile() {\n      const currentUser = this.authService.getCurrentUser();\n      if (!currentUser) {\n        throw new Error('No authenticated user');\n      }\n      return this.getUserProfile(currentUser.id);\n    }\n    // Update user profile\n    updateProfile(userId, updates) {\n      return this.http.put(`${this.API_BASE_URL}/users/${userId}`, updates).pipe(tap(updatedUser => {\n        if (updatedUser.id === this.authService.getCurrentUser()?.id) {\n          this.userProfileSubject.next(updatedUser);\n          // Update auth service with new user data\n          this.authService.updateUserProfile(updatedUser);\n        }\n      }));\n    }\n    // Change password\n    changePassword(userId, passwordData) {\n      return this.http.put(`${this.API_BASE_URL}/users/${userId}/password`, passwordData);\n    }\n    // Upload profile picture\n    uploadProfilePicture(userId, file) {\n      const formData = new FormData();\n      formData.append('profilePicture', file);\n      return this.http.post(`${this.API_BASE_URL}/users/${userId}/profile-picture`, formData).pipe(tap(response => {\n        // Update local user profile with new picture URL\n        const currentProfile = this.userProfileSubject.value;\n        if (currentProfile && currentProfile.id === userId) {\n          const updatedProfile = {\n            ...currentProfile,\n            profilePicture: response.profilePictureUrl\n          };\n          this.userProfileSubject.next(updatedProfile);\n          this.authService.updateUserProfile(updatedProfile);\n        }\n      }));\n    }\n    // Get user statistics\n    getUserStats(userId) {\n      return this.http.get(`${this.API_BASE_URL}/users/${userId}/stats`).pipe(tap(stats => {\n        if (userId === this.authService.getCurrentUser()?.id) {\n          this.userStatsSubject.next(stats);\n        }\n      }));\n    }\n    // Follow a user\n    followUser(userId, targetUserId) {\n      return this.http.post(`${this.API_BASE_URL}/users/${userId}/follow/${targetUserId}`, {});\n    }\n    // Unfollow a user\n    unfollowUser(userId, targetUserId) {\n      return this.http.delete(`${this.API_BASE_URL}/users/${userId}/follow/${targetUserId}`);\n    }\n    // Get user's followers\n    getUserFollowers(userId, page = 0, pageSize = 20) {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        pageSize: pageSize.toString()\n      });\n      return this.http.get(`${this.API_BASE_URL}/users/${userId}/followers?${params}`);\n    }\n    // Get users that the user is following\n    getUserFollowing(userId, page = 0, pageSize = 20) {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        pageSize: pageSize.toString()\n      });\n      return this.http.get(`${this.API_BASE_URL}/users/${userId}/following?${params}`);\n    }\n    // Search users\n    searchUsers(query, page = 0, pageSize = 20) {\n      const params = new URLSearchParams({\n        q: query,\n        page: page.toString(),\n        pageSize: pageSize.toString()\n      });\n      return this.http.get(`${this.API_BASE_URL}/users/search?${params}`);\n    }\n    // Get suggested users to follow\n    getSuggestedUsers(userId, limit = 10) {\n      return this.http.get(`${this.API_BASE_URL}/users/${userId}/suggestions`, {\n        params: {\n          limit: limit.toString()\n        }\n      });\n    }\n    // Check if user is following another user\n    isFollowing(userId, targetUserId) {\n      return this.http.get(`${this.API_BASE_URL}/users/${userId}/following/${targetUserId}/check`);\n    }\n    // Get cached user profile\n    getCachedUserProfile() {\n      return this.userProfileSubject.value;\n    }\n    // Get cached user stats\n    getCachedUserStats() {\n      return this.userStatsSubject.value;\n    }\n    // Clear user data\n    clearUserData() {\n      this.userProfileSubject.next(null);\n      this.userStatsSubject.next(null);\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function UserService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    }));\n  }\n  _staticBlock();\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}