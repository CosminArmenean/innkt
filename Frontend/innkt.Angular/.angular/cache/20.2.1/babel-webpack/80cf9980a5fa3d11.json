{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport let PostsService = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class PostsService {\n    constructor(http, authService) {\n      this.http = http;\n      this.authService = authService;\n      this.API_BASE_URL = 'https://localhost:5002/api'; // Frontier service\n      this.postsSubject = new BehaviorSubject([]);\n      this.currentPostSubject = new BehaviorSubject(null);\n      this.posts$ = this.postsSubject.asObservable();\n      this.currentPost$ = this.currentPostSubject.asObservable();\n    }\n    // Get posts with pagination and filters\n    getPosts(page = 0, pageSize = 10, filters) {\n      let params = new HttpParams().set('page', page.toString()).set('pageSize', pageSize.toString());\n      if (filters) {\n        if (filters.category) params = params.set('category', filters.category);\n        if (filters.tags && filters.tags.length > 0) params = params.set('tags', filters.tags.join(','));\n        if (filters.authorId) params = params.set('authorId', filters.authorId);\n        if (filters.isPublished !== undefined) params = params.set('isPublished', filters.isPublished.toString());\n        if (filters.searchTerm) params = params.set('searchTerm', filters.searchTerm);\n        if (filters.sortBy) params = params.set('sortBy', filters.sortBy);\n        if (filters.sortOrder) params = params.set('sortOrder', filters.sortOrder);\n      }\n      return this.http.get(`${this.API_BASE_URL}/posts`, {\n        params\n      }).pipe(tap(response => {\n        this.postsSubject.next(response.posts);\n      }));\n    }\n    // Get a single post by ID\n    getPost(id) {\n      return this.http.get(`${this.API_BASE_URL}/posts/${id}`).pipe(tap(post => {\n        this.currentPostSubject.next(post);\n      }));\n    }\n    // Create a new post\n    createPost(postData) {\n      return this.http.post(`${this.API_BASE_URL}/posts`, postData).pipe(tap(newPost => {\n        const currentPosts = this.postsSubject.value;\n        this.postsSubject.next([newPost, ...currentPosts]);\n      }));\n    }\n    // Update an existing post\n    updatePost(id, updates) {\n      return this.http.put(`${this.API_BASE_URL}/posts/${id}`, updates).pipe(tap(updatedPost => {\n        const currentPosts = this.postsSubject.value;\n        const updatedPosts = currentPosts.map(post => post.id === id ? updatedPost : post);\n        this.postsSubject.next(updatedPosts);\n        if (this.currentPostSubject.value?.id === id) {\n          this.currentPostSubject.next(updatedPost);\n        }\n      }));\n    }\n    // Delete a post\n    deletePost(id) {\n      return this.http.delete(`${this.API_BASE_URL}/posts/${id}`).pipe(tap(() => {\n        const currentPosts = this.postsSubject.value;\n        const filteredPosts = currentPosts.filter(post => post.id !== id);\n        this.postsSubject.next(filteredPosts);\n        if (this.currentPostSubject.value?.id === id) {\n          this.currentPostSubject.next(null);\n        }\n      }));\n    }\n    // Like/unlike a post\n    toggleLike(postId) {\n      return this.http.post(`${this.API_BASE_URL}/posts/${postId}/like`, {}).pipe(tap(updatedPost => {\n        const currentPosts = this.postsSubject.value;\n        const updatedPosts = currentPosts.map(post => post.id === postId ? updatedPost : post);\n        this.postsSubject.next(updatedPosts);\n        if (this.currentPostSubject.value?.id === postId) {\n          this.currentPostSubject.next(updatedPost);\n        }\n      }));\n    }\n    // Get posts by user\n    getUserPosts(userId, page = 0, pageSize = 10) {\n      const params = new HttpParams().set('page', page.toString()).set('pageSize', pageSize.toString());\n      return this.http.get(`${this.API_BASE_URL}/users/${userId}/posts`, {\n        params\n      });\n    }\n    // Get trending posts\n    getTrendingPosts(limit = 10) {\n      return this.http.get(`${this.API_BASE_URL}/posts/trending`, {\n        params: new HttpParams().set('limit', limit.toString())\n      });\n    }\n    // Search posts\n    searchPosts(query, page = 0, pageSize = 10) {\n      const params = new HttpParams().set('q', query).set('page', page.toString()).set('pageSize', pageSize.toString());\n      return this.http.get(`${this.API_BASE_URL}/posts/search`, {\n        params\n      });\n    }\n    // Clear current post\n    clearCurrentPost() {\n      this.currentPostSubject.next(null);\n    }\n    // Get posts from cache\n    getCachedPosts() {\n      return this.postsSubject.value;\n    }\n    // Get current post from cache\n    getCachedCurrentPost() {\n      return this.currentPostSubject.value;\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function PostsService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || PostsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PostsService,\n      factory: PostsService.ɵfac,\n      providedIn: 'root'\n    }));\n  }\n  _staticBlock();\n  return PostsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}