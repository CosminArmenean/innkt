{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let LanguageService = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class LanguageService {\n    constructor() {\n      this.SUPPORTED_LANGUAGES = [{\n        code: 'en',\n        name: 'English',\n        nativeName: 'English',\n        isRTL: false,\n        flag: '🇺🇸'\n      }, {\n        code: 'he',\n        name: 'Hebrew',\n        nativeName: 'עברית',\n        isRTL: true,\n        flag: '🇮🇱'\n      }, {\n        code: 'ar',\n        name: 'Arabic',\n        nativeName: 'العربية',\n        isRTL: true,\n        flag: '🇸🇦'\n      }, {\n        code: 'es',\n        name: 'Spanish',\n        nativeName: 'Español',\n        isRTL: false,\n        flag: '🇪🇸'\n      }, {\n        code: 'fr',\n        name: 'French',\n        nativeName: 'Français',\n        isRTL: false,\n        flag: '🇫🇷'\n      }, {\n        code: 'de',\n        name: 'German',\n        nativeName: 'Deutsch',\n        isRTL: false,\n        flag: '🇩🇪'\n      }, {\n        code: 'it',\n        name: 'Italian',\n        nativeName: 'Italiano',\n        isRTL: false,\n        flag: '🇮🇹'\n      }, {\n        code: 'pt',\n        name: 'Portuguese',\n        nativeName: 'Português',\n        isRTL: false,\n        flag: '🇵🇹'\n      }, {\n        code: 'ru',\n        name: 'Russian',\n        nativeName: 'Русский',\n        isRTL: false,\n        flag: '🇷🇺'\n      }, {\n        code: 'zh',\n        name: 'Chinese',\n        nativeName: '中文',\n        isRTL: false,\n        flag: '🇨🇳'\n      }, {\n        code: 'ja',\n        name: 'Japanese',\n        nativeName: '日本語',\n        isRTL: false,\n        flag: '🇯🇵'\n      }, {\n        code: 'ko',\n        name: 'Korean',\n        nativeName: '한국어',\n        isRTL: false,\n        flag: '🇰🇷'\n      }];\n      this.currentLanguageSubject = new BehaviorSubject('en');\n      this.currentLanguage$ = this.currentLanguageSubject.asObservable();\n      this.initializeLanguage();\n    }\n    initializeLanguage() {\n      // Try to get language from localStorage\n      const savedLanguage = localStorage.getItem('innkt-language');\n      if (savedLanguage && this.isLanguageSupported(savedLanguage)) {\n        this.setLanguage(savedLanguage);\n      } else {\n        // Try to detect browser language\n        const browserLanguage = navigator.language.split('-')[0];\n        if (this.isLanguageSupported(browserLanguage)) {\n          this.setLanguage(browserLanguage);\n        } else {\n          // Default to English\n          this.setLanguage('en');\n        }\n      }\n    }\n    getSupportedLanguages() {\n      return [...this.SUPPORTED_LANGUAGES];\n    }\n    getCurrentLanguage() {\n      return this.currentLanguageSubject.value;\n    }\n    getCurrentLanguageInfo() {\n      return this.SUPPORTED_LANGUAGES.find(lang => lang.code === this.currentLanguageSubject.value);\n    }\n    setLanguage(languageCode) {\n      if (this.isLanguageSupported(languageCode)) {\n        this.currentLanguageSubject.next(languageCode);\n        localStorage.setItem('innkt-language', languageCode);\n        // Update document direction for RTL languages\n        const languageInfo = this.SUPPORTED_LANGUAGES.find(lang => lang.code === languageCode);\n        if (languageInfo) {\n          document.documentElement.dir = languageInfo.isRTL ? 'rtl' : 'ltr';\n          document.documentElement.lang = languageCode;\n        }\n      }\n    }\n    isLanguageSupported(languageCode) {\n      return this.SUPPORTED_LANGUAGES.some(lang => lang.code === languageCode);\n    }\n    isCurrentLanguageRTL() {\n      const currentLang = this.getCurrentLanguageInfo();\n      return currentLang ? currentLang.isRTL : false;\n    }\n    getLanguageName(languageCode) {\n      const language = this.SUPPORTED_LANGUAGES.find(lang => lang.code === languageCode);\n      return language ? language.name : languageCode;\n    }\n    getNativeLanguageName(languageCode) {\n      const language = this.SUPPORTED_LANGUAGES.find(lang => lang.code === languageCode);\n      return language ? language.nativeName : languageCode;\n    }\n    getLanguageFlag(languageCode) {\n      const language = this.SUPPORTED_LANGUAGES.find(lang => lang.code === languageCode);\n      return language ? language.flag : '🌐';\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function LanguageService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || LanguageService)();\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LanguageService,\n      factory: LanguageService.ɵfac,\n      providedIn: 'root'\n    }));\n  }\n  _staticBlock();\n  return LanguageService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}