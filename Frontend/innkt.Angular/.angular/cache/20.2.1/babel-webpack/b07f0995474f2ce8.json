{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/threat-detection.service\";\nimport * as i2 from \"@angular/common\";\nfunction SecurityTestComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"h4\");\n    i0.ɵɵtext(2, \"Test Result:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"pre\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"json\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 1, ctx_r0.testResult));\n  }\n}\nexport let SecurityTestComponent = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class SecurityTestComponent {\n    constructor(threatDetectionService) {\n      this.threatDetectionService = threatDetectionService;\n      this.serviceStatus = 'Unknown';\n      this.isMonitoring = false;\n      this.testResult = null;\n      this.checkServiceStatus();\n    }\n    checkServiceStatus() {\n      try {\n        // Check if service is properly injected\n        this.serviceStatus = 'Injected Successfully';\n        // Check monitoring status\n        this.threatDetectionService.isMonitoring$.subscribe(status => this.isMonitoring = status);\n      } catch (error) {\n        this.serviceStatus = 'Error: ' + error;\n      }\n    }\n    testConnection() {\n      this.testResult = 'Testing connection...';\n      // Test a simple API call\n      const testRequest = {\n        userId: 'test-user',\n        ipAddress: '127.0.0.1',\n        userAgent: 'Test Browser',\n        endpoint: '/test',\n        method: 'GET',\n        headers: {},\n        timestamp: new Date()\n      };\n      this.threatDetectionService.analyzeRequest(testRequest).subscribe({\n        next: result => {\n          this.testResult = {\n            success: true,\n            message: 'Connection successful',\n            result: result\n          };\n        },\n        error: error => {\n          this.testResult = {\n            success: false,\n            message: 'Connection failed',\n            error: error.message || error\n          };\n        }\n      });\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function SecurityTestComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SecurityTestComponent)(i0.ɵɵdirectiveInject(i1.ThreatDetectionService));\n    }, this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SecurityTestComponent,\n      selectors: [[\"app-security-test\"]],\n      decls: 16,\n      vars: 3,\n      consts: [[1, \"security-test\"], [1, \"test-results\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [\"class\", \"test-result\", 4, \"ngIf\"], [1, \"test-result\"]],\n      template: function SecurityTestComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"Security Dashboard Test\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"p\");\n          i0.ɵɵtext(4, \"Testing Threat Detection Service Integration\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\", 1)(6, \"h3\");\n          i0.ɵɵtext(7, \"Service Status:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"ul\")(9, \"li\");\n          i0.ɵɵtext(10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"li\");\n          i0.ɵɵtext(12);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"button\", 2);\n          i0.ɵɵlistener(\"click\", function SecurityTestComponent_Template_button_click_13_listener() {\n            return ctx.testConnection();\n          });\n          i0.ɵɵtext(14, \" Test Connection \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(15, SecurityTestComponent_div_15_Template, 6, 3, \"div\", 3);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(10);\n          i0.ɵɵtextInterpolate1(\"Threat Detection Service: \", ctx.serviceStatus);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\"Monitoring Active: \", ctx.isMonitoring ? \"Yes\" : \"No\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.testResult);\n        }\n      },\n      dependencies: [CommonModule, i2.NgIf, i2.JsonPipe],\n      styles: [\".security-test[_ngcontent-%COMP%]{padding:2rem;max-width:800px;margin:0 auto}.test-results[_ngcontent-%COMP%]{margin-top:2rem;padding:1rem;border:1px solid #ddd;border-radius:8px}.test-result[_ngcontent-%COMP%]{margin-top:1rem;padding:1rem;background:#f8f9fa;border-radius:4px}.btn[_ngcontent-%COMP%]{padding:.5rem 1rem;border:none;border-radius:4px;cursor:pointer;margin-top:1rem}.btn-primary[_ngcontent-%COMP%]{background:#007bff;color:#fff}\"]\n    }));\n  }\n  _staticBlock();\n  return SecurityTestComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}