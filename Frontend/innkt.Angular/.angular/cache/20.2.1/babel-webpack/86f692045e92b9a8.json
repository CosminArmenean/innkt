{"ast":null,"code":"import { inject } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nexport const ErrorInterceptor = (request, next) => {\n  const router = inject(Router);\n  return next(request).pipe(catchError(error => {\n    let apiError;\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      apiError = {\n        message: 'A client-side error occurred',\n        statusCode: 0,\n        errors: [error.error.message]\n      };\n    } else {\n      // Server-side error\n      const errorResponse = error.error;\n      apiError = {\n        message: errorResponse?.message || error.message || 'An error occurred',\n        statusCode: error.status,\n        errors: errorResponse?.errors || [],\n        timestamp: new Date().toISOString()\n      };\n      // Handle specific HTTP status codes\n      switch (error.status) {\n        case 400:\n          apiError.message = 'Bad request. Please check your input.';\n          break;\n        case 401:\n          apiError.message = 'Unauthorized. Please log in again.';\n          break;\n        case 403:\n          apiError.message = 'Access forbidden. You don\\'t have permission to perform this action.';\n          break;\n        case 404:\n          apiError.message = 'Resource not found.';\n          break;\n        case 409:\n          apiError.message = 'Conflict. The resource already exists or cannot be created.';\n          break;\n        case 422:\n          apiError.message = 'Validation failed. Please check your input.';\n          break;\n        case 429:\n          apiError.message = 'Too many requests. Please try again later.';\n          break;\n        case 500:\n          apiError.message = 'Internal server error. Please try again later.';\n          break;\n        case 502:\n          apiError.message = 'Bad gateway. Service temporarily unavailable.';\n          break;\n        case 503:\n          apiError.message = 'Service unavailable. Please try again later.';\n          break;\n        default:\n          apiError.message = 'An unexpected error occurred.';\n      }\n    }\n    // Log error for debugging (in production, this would go to a logging service)\n    console.error('API Error:', apiError);\n    // You could also emit this error to a global error service\n    // this.errorService.handleError(apiError);\n    return throwError(() => apiError);\n  }));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}