{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/cosmi/source/repos/innkt/Frontend/innkt.Angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.isAuthenticatedSubject = new BehaviorSubject(false);\n      this.tokenSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      this.isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n      this.token$ = this.tokenSubject.asObservable();\n      // Backend service URLs\n      this.OFFICER_BASE_URL = 'https://localhost:5000';\n      this.FRONTIER_BASE_URL = 'https://localhost:5002';\n      this.initializeAuth();\n    }\n    initializeAuth() {\n      const token = localStorage.getItem('auth_token');\n      const user = localStorage.getItem('current_user');\n      if (token && user) {\n        try {\n          const userObj = JSON.parse(user);\n          this.tokenSubject.next(token);\n          this.currentUserSubject.next(userObj);\n          this.isAuthenticatedSubject.next(true);\n        } catch (error) {\n          this.clearAuth();\n        }\n      }\n    }\n    login(credentials) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          // Use OAuth 2.0 authorization code flow with Officer service\n          const authUrl = `${_this.OFFICER_BASE_URL}/connect/authorize?` + `client_id=innkt.web&` + `redirect_uri=${encodeURIComponent('https://localhost:4200/signin-callback')}&` + `response_type=code&` + `scope=openid profile email innkt.api&` + `state=${_this.generateRandomState()}`;\n          // For now, simulate the OAuth flow\n          // In production, this would redirect to the Officer service\n          console.log('Redirecting to OAuth authorization:', authUrl);\n          // Simulate successful login for development\n          const mockResponse = {\n            user: {\n              id: '1',\n              email: credentials.email,\n              firstName: 'John',\n              lastName: 'Doe',\n              language: 'en',\n              isActive: true,\n              createdAt: new Date(),\n              isJointAccount: false\n            },\n            token: 'mock-jwt-token',\n            refreshToken: 'mock-refresh-token'\n          };\n          _this.setAuth(mockResponse);\n          return true;\n        } catch (error) {\n          console.error('Login failed:', error);\n          return false;\n        }\n      })();\n    }\n    register(userData) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          // Register with Officer service\n          const response = yield _this2.http.post(`${_this2.FRONTIER_BASE_URL}/api/auth/register`, userData).toPromise();\n          if (response) {\n            _this2.setAuth(response);\n            return true;\n          }\n          return false;\n        } catch (error) {\n          console.error('Registration failed:', error);\n          return false;\n        }\n      })();\n    }\n    refreshToken() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const refreshToken = localStorage.getItem('refresh_token');\n          if (!refreshToken) {\n            return false;\n          }\n          const response = yield _this3.http.post(`${_this3.OFFICER_BASE_URL}/connect/token`, {\n            grant_type: 'refresh_token',\n            refresh_token: refreshToken,\n            client_id: 'innkt.web'\n          }).toPromise();\n          if (response) {\n            localStorage.setItem('auth_token', response.access_token);\n            _this3.tokenSubject.next(response.access_token);\n            return true;\n          }\n          return false;\n        } catch (error) {\n          console.error('Token refresh failed:', error);\n          _this3.clearAuth();\n          return false;\n        }\n      })();\n    }\n    setAuth(authResponse) {\n      localStorage.setItem('auth_token', authResponse.token);\n      localStorage.setItem('refresh_token', authResponse.refreshToken);\n      localStorage.setItem('current_user', JSON.stringify(authResponse.user));\n      this.tokenSubject.next(authResponse.token);\n      this.currentUserSubject.next(authResponse.user);\n      this.isAuthenticatedSubject.next(true);\n    }\n    logout() {\n      // Logout from Officer service\n      const logoutUrl = `${this.OFFICER_BASE_URL}/connect/endsession?` + `id_token_hint=${this.tokenSubject.value}&` + `post_logout_redirect_uri=${encodeURIComponent('https://localhost:4200')}`;\n      this.clearAuth();\n      // Redirect to Officer logout endpoint\n      window.location.href = logoutUrl;\n    }\n    clearAuth() {\n      localStorage.removeItem('auth_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('current_user');\n      this.tokenSubject.next(null);\n      this.currentUserSubject.next(null);\n      this.isAuthenticatedSubject.next(false);\n    }\n    getCurrentUser() {\n      return this.currentUserSubject.value;\n    }\n    isAuthenticated() {\n      return this.isAuthenticatedSubject.value;\n    }\n    getToken() {\n      return this.tokenSubject.value;\n    }\n    updateUserProfile(updates) {\n      const currentUser = this.currentUserSubject.value;\n      if (currentUser) {\n        const updatedUser = {\n          ...currentUser,\n          ...updates\n        };\n        this.currentUserSubject.next(updatedUser);\n        localStorage.setItem('current_user', JSON.stringify(updatedUser));\n      }\n    }\n    generateRandomState() {\n      return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n    }\n    // OAuth callback handler\n    handleOAuthCallback(code, state) {\n      var _this4 = this;\n      return new Promise(/*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (resolve) {\n          try {\n            // Exchange authorization code for tokens\n            const tokenResponse = yield _this4.http.post(`${_this4.OFFICER_BASE_URL}/connect/token`, {\n              grant_type: 'authorization_code',\n              client_id: 'innkt.web',\n              code: code,\n              redirect_uri: 'https://localhost:4200/signin-callback'\n            }).toPromise();\n            if (tokenResponse) {\n              // Get user info using the access token\n              const userInfo = yield _this4.http.get(`${_this4.OFFICER_BASE_URL}/connect/userinfo`, {\n                headers: new HttpHeaders({\n                  'Authorization': `Bearer ${tokenResponse.access_token}`\n                })\n              }).toPromise();\n              if (userInfo) {\n                const authResponse = {\n                  user: userInfo,\n                  token: tokenResponse.access_token,\n                  refreshToken: tokenResponse.refresh_token\n                };\n                _this4.setAuth(authResponse);\n                resolve(true);\n              } else {\n                resolve(false);\n              }\n            } else {\n              resolve(false);\n            }\n          } catch (error) {\n            console.error('OAuth callback failed:', error);\n            resolve(false);\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    }));\n  }\n  _staticBlock();\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}