{"ast":null,"code":"import { inject } from '@angular/core';\nimport { throwError, BehaviorSubject, from } from 'rxjs';\nimport { catchError, filter, take, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../services/auth.service';\nimport { Router } from '@angular/router';\nexport const AuthInterceptor = (request, next) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  let isRefreshing = false;\n  let refreshTokenSubject = new BehaviorSubject(null);\n  // Add auth token to request if available\n  const token = authService.getToken();\n  if (token) {\n    request = addToken(request, token);\n  }\n  return next(request).pipe(catchError(error => {\n    if (error.status === 401 && !request.url.includes('auth')) {\n      return handle401Error(request, next, authService, router, isRefreshing, refreshTokenSubject);\n    }\n    return throwError(() => error);\n  }));\n};\nfunction addToken(request, token) {\n  return request.clone({\n    setHeaders: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n}\nfunction handle401Error(request, next, authService, router, isRefreshing, refreshTokenSubject) {\n  if (!isRefreshing) {\n    isRefreshing = true;\n    refreshTokenSubject.next(null);\n    return from(authService.refreshToken()).pipe(switchMap(success => {\n      isRefreshing = false;\n      if (success) {\n        const newToken = authService.getToken();\n        refreshTokenSubject.next(newToken);\n        return next(addToken(request, newToken));\n      } else {\n        // Refresh failed, redirect to login\n        authService.logout();\n        router.navigate(['/login']);\n        return throwError(() => new Error('Token refresh failed'));\n      }\n    }), catchError(error => {\n      isRefreshing = false;\n      authService.logout();\n      router.navigate(['/login']);\n      return throwError(() => error);\n    }));\n  } else {\n    return refreshTokenSubject.pipe(filter(token => token !== null), take(1), switchMap(token => next(addToken(request, token))));\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}