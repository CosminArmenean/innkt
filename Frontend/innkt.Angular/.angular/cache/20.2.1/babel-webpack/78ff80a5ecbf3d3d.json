{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let ThemeService = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class ThemeService {\n    constructor() {\n      this.AVAILABLE_THEMES = [{\n        id: 'light',\n        name: 'Light',\n        icon: '☀️',\n        isDark: false\n      }, {\n        id: 'dark',\n        name: 'Dark',\n        icon: '🌙',\n        isDark: true\n      }, {\n        id: 'auto',\n        name: 'Auto',\n        icon: '🔄',\n        isDark: false\n      }];\n      this.currentThemeSubject = new BehaviorSubject('light');\n      this.currentTheme$ = this.currentThemeSubject.asObservable();\n      this.systemThemeSubject = new BehaviorSubject('light');\n      this.initializeTheme();\n      this.setupSystemThemeDetection();\n    }\n    initializeTheme() {\n      // Try to get theme from localStorage\n      const savedTheme = localStorage.getItem('innkt-theme');\n      if (savedTheme && this.isThemeSupported(savedTheme)) {\n        this.setTheme(savedTheme);\n      } else {\n        // Default to light theme\n        this.setTheme('light');\n      }\n    }\n    setupSystemThemeDetection() {\n      // Check if the browser supports prefers-color-scheme\n      if (window.matchMedia) {\n        this.mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n        // Set initial system theme\n        this.systemThemeSubject.next(this.mediaQuery.matches ? 'dark' : 'light');\n        // Listen for system theme changes\n        this.mediaQuery.addEventListener('change', e => {\n          this.systemThemeSubject.next(e.matches ? 'dark' : 'light');\n          // If auto theme is selected, update accordingly\n          if (this.currentThemeSubject.value === 'auto') {\n            this.applyTheme(e.matches ? 'dark' : 'light');\n          }\n        });\n      }\n    }\n    getAvailableThemes() {\n      return [...this.AVAILABLE_THEMES];\n    }\n    getCurrentTheme() {\n      return this.currentThemeSubject.value;\n    }\n    getCurrentThemeInfo() {\n      return this.AVAILABLE_THEMES.find(theme => theme.id === this.currentThemeSubject.value);\n    }\n    setTheme(themeId) {\n      if (this.isThemeSupported(themeId)) {\n        this.currentThemeSubject.next(themeId);\n        localStorage.setItem('innkt-theme', themeId);\n        // Apply the theme\n        if (themeId === 'auto') {\n          this.applyTheme(this.systemThemeSubject.value);\n        } else {\n          this.applyTheme(themeId);\n        }\n      }\n    }\n    applyTheme(themeId) {\n      const theme = this.AVAILABLE_THEMES.find(t => t.id === themeId);\n      if (theme) {\n        // Remove all theme classes\n        document.documentElement.classList.remove('theme-light', 'theme-dark');\n        // Add current theme class\n        document.documentElement.classList.add(`theme-${themeId}`);\n        // Set data attribute for CSS custom properties\n        document.documentElement.setAttribute('data-theme', themeId);\n        // Update body class\n        document.body.className = `theme-${themeId}`;\n        // Emit theme change event for components that need it\n        this.currentThemeSubject.next(themeId);\n      }\n    }\n    isThemeSupported(themeId) {\n      return this.AVAILABLE_THEMES.some(theme => theme.id === themeId);\n    }\n    isCurrentThemeDark() {\n      const currentTheme = this.getCurrentThemeInfo();\n      if (currentTheme?.id === 'auto') {\n        return this.systemThemeSubject.value === 'dark';\n      }\n      return currentTheme?.isDark || false;\n    }\n    getThemeName(themeId) {\n      const theme = this.AVAILABLE_THEMES.find(t => t.id === themeId);\n      return theme ? theme.name : themeId;\n    }\n    getThemeIcon(themeId) {\n      const theme = this.AVAILABLE_THEMES.find(t => t.id === themeId);\n      return theme ? theme.icon : '🎨';\n    }\n    toggleTheme() {\n      const currentTheme = this.getCurrentTheme();\n      if (currentTheme === 'light') {\n        this.setTheme('dark');\n      } else if (currentTheme === 'dark') {\n        this.setTheme('light');\n      } else {\n        // For auto theme, toggle between light and dark\n        const systemTheme = this.systemThemeSubject.value;\n        this.setTheme(systemTheme === 'light' ? 'dark' : 'light');\n      }\n    }\n    getSystemTheme() {\n      return this.systemThemeSubject.value;\n    }\n    // Method to get computed theme (useful for components that need to know the actual applied theme)\n    getComputedTheme() {\n      const currentTheme = this.getCurrentTheme();\n      if (currentTheme === 'auto') {\n        return this.systemThemeSubject.value;\n      }\n      return currentTheme;\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function ThemeService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ThemeService)();\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ThemeService,\n      factory: ThemeService.ɵfac,\n      providedIn: 'root'\n    }));\n  }\n  _staticBlock();\n  return ThemeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}