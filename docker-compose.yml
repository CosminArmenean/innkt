version: '3.8'

services:
  # Redis - Shared cache and pub/sub
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - innkt-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB - For messaging service
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=innkt_messaging
    volumes:
      - mongodb_data:/data/db
    networks:
      - innkt-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka - Message broker
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - innkt-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - innkt-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Officer Service - User management and authentication
  officer:
    build:
      context: ./Backend/innkt.Officer
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:5001;http://+:5000
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=OfficerDB;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;
      - ConnectionStrings__Redis=redis:6379
      - Kafka__BootstrapServers=kafka:9092
    depends_on:
      - redis
      - kafka
    networks:
      - innkt-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NeuroSpark Service - AI and image processing
  neurospark:
    build:
      context: ./Backend/innkt.NeuroSpark
      dockerfile: Dockerfile
    ports:
      - "5002:5002"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:5002;http://+:5003
      - ConnectionStrings__Redis=redis:6379
      - Kafka__BootstrapServers=kafka:9092
      - OfficerService__BaseUrl=https://officer:5001
    depends_on:
      - redis
      - kafka
      - officer
    networks:
      - innkt-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Messaging Service - Real-time messaging with Socket.IO
  messaging:
    build:
      context: ./Backend/innkt.Messaging
      dockerfile: Dockerfile
    ports:
      - "5003:5003"
    environment:
      - NODE_ENV=development
      - PORT=5003
      - MONGODB_URI=mongodb://mongodb:27017/innkt_messaging
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-here
      - FRONTEND_URL=http://localhost:3000
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./Backend/innkt.Messaging/logs:/app/logs
    networks:
      - innkt-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5003/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontier Service - API Gateway and load balancer
  frontier:
    build:
      context: ./Backend/innkt.Frontier
      dockerfile: Dockerfile
    ports:
      - "5004:5004"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:5004;http://+:5005
      - ConnectionStrings__Redis=redis:6379
      - Kafka__BootstrapServers=kafka:9092
    depends_on:
      - redis
      - kafka
      - officer
      - neurospark
      - messaging
    networks:
      - innkt-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./Frontend/innkt.React
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=https://localhost:5004
      - REACT_APP_MESSAGING_URL=http://localhost:5003
    depends_on:
      - frontier
    networks:
      - innkt-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus - Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - innkt-network

  # Grafana - Monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - innkt-network

volumes:
  redis_data:
  mongodb_data:
  prometheus_data:
  grafana_data:

networks:
  innkt-network:
    driver: bridge