// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using innkt.Kinder.Data;

#nullable disable

namespace innkt.Kinder.Migrations
{
    [DbContext(typeof(KinderDbContext))]
    [Migration("20251007191328_InitialKinderMigration")]
    partial class InitialKinderMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("innkt.Kinder.Models.BehaviorAssessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssessmentData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssessmentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AssessorNotes")
                        .HasColumnType("text");

                    b.Property<double>("ContentQuality")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<double>("DigitalCitizenship")
                        .HasColumnType("double precision");

                    b.Property<double>("EducationalEngagement")
                        .HasColumnType("double precision");

                    b.Property<double>("IndependenceReadiness")
                        .HasColumnType("double precision");

                    b.Property<Guid>("KidAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("NextAssessmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("OverallMaturityScore")
                        .HasColumnType("double precision");

                    b.Property<double>("ParentTrust")
                        .HasColumnType("double precision");

                    b.Property<string>("RecommendedActions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("ResponsibleBehavior")
                        .HasColumnType("double precision");

                    b.Property<string>("SafetyRecommendations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("SafetyRisk")
                        .HasColumnType("double precision");

                    b.Property<double>("SocialInteraction")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("NextAssessmentDate");

                    b.HasIndex("KidAccountId", "AssessmentDate");

                    b.ToTable("behavior_assessments");
                });

            modelBuilder.Entity("innkt.Kinder.Models.ContentSafetyRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AiModelVersion")
                        .HasColumnType("text");

                    b.Property<string>("ApplicableContexts")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("ConfidenceThreshold")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Examples")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxAge")
                        .HasColumnType("integer");

                    b.Property<int>("MinAge")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<bool>("RequiresHumanReview")
                        .HasColumnType("boolean");

                    b.Property<string>("RuleContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MinAge", "MaxAge");

                    b.HasIndex("Priority", "IsActive");

                    b.HasIndex("RuleType", "IsActive");

                    b.ToTable("content_safety_rules");
                });

            modelBuilder.Entity("innkt.Kinder.Models.EducationalProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AcademicPerformance")
                        .HasColumnType("double precision");

                    b.Property<double>("CollaborationSkills")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("CreativityScore")
                        .HasColumnType("double precision");

                    b.Property<double>("DigitalLiteracy")
                        .HasColumnType("double precision");

                    b.Property<string>("GradeLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HomeworkCollaborationEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("KidAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("LearningGoals")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ParentTeacherChatEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("ProgressSharingEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("SchoolDistrict")
                        .HasColumnType("text");

                    b.Property<string>("SchoolName")
                        .HasColumnType("text");

                    b.Property<string>("Subjects")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("KidAccountId")
                        .IsUnique();

                    b.HasIndex("TeacherId");

                    b.ToTable("educational_profiles");
                });

            modelBuilder.Entity("innkt.Kinder.Models.IndependenceTransition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanRevert")
                        .HasColumnType("boolean");

                    b.Property<string>("CelebrationData")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("CurrentMaturityScore")
                        .HasColumnType("double precision");

                    b.Property<bool>("DigitalCertificateGenerated")
                        .HasColumnType("boolean");

                    b.Property<bool>("EducationalGoalsMet")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IndependenceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("KidAccountId")
                        .HasColumnType("uuid");

                    b.Property<int>("MonitoringPeriodDays")
                        .HasColumnType("integer");

                    b.Property<bool>("ParentFinalApproval")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("ParentMessage")
                        .HasColumnType("text");

                    b.Property<int>("PreparationPeriodDays")
                        .HasColumnType("integer");

                    b.Property<double>("RequiredMaturityScore")
                        .HasColumnType("double precision");

                    b.Property<string>("RevertReason")
                        .HasColumnType("text");

                    b.Property<bool>("SafetyTestPassed")
                        .HasColumnType("boolean");

                    b.Property<string>("TransitionPhase")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WarningPeriodDays")
                        .HasColumnType("integer");

                    b.Property<bool>("WasReverted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("KidAccountId");

                    b.HasIndex("IndependenceDate", "TransitionPhase");

                    b.ToTable("independence_transitions");
                });

            modelBuilder.Entity("innkt.Kinder.Models.KidAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AdaptiveSafetyEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int>("AgeGapLimitYears")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("AllowedHoursEnd")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("AllowedHoursStart")
                        .HasColumnType("time without time zone");

                    b.Property<string>("AllowedTopics")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("BehaviorScore")
                        .HasColumnType("double precision");

                    b.Property<bool>("BlockMatureContent")
                        .HasColumnType("boolean");

                    b.Property<string>("BlockedTopics")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<double>("CurrentMaturityScore")
                        .HasColumnType("double precision");

                    b.Property<bool>("EducationalContentOnly")
                        .HasColumnType("boolean");

                    b.Property<double>("EducationalEngagement")
                        .HasColumnType("double precision");

                    b.Property<string>("EmergencyContacts")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("IndependenceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IndependenceDateSet")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastBehaviorAssessment")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LocationSharingEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxConnections")
                        .HasColumnType("integer");

                    b.Property<int>("MaxDailyTimeMinutes")
                        .HasColumnType("integer");

                    b.Property<double>("MinContentSafetyScore")
                        .HasColumnType("double precision");

                    b.Property<bool>("PanicButtonEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ParentNetworkOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequireParentApproval")
                        .HasColumnType("boolean");

                    b.Property<double>("RequiredMaturityScore")
                        .HasColumnType("double precision");

                    b.Property<string>("SafetyLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SchoolModeEnabled")
                        .HasColumnType("boolean");

                    b.Property<double>("TrustScore")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("ParentId", "IsActive");

                    b.ToTable("kid_accounts");
                });

            modelBuilder.Entity("innkt.Kinder.Models.KidLoginCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("text");

                    b.Property<int>("ExpirationDays")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FailedAttempts")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("KidAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastLoginAttempt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("QRCodeData")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("ParentId", "CreatedAt");

                    b.HasIndex("KidAccountId", "IsRevoked", "IsUsed");

                    b.ToTable("kid_login_codes");
                });

            modelBuilder.Entity("innkt.Kinder.Models.KidPasswordSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanChangePassword")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FirstPasswordSetAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasPassword")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("IndependenceDay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IndependenceDayReached")
                        .HasColumnType("boolean");

                    b.Property<Guid>("KidAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastPasswordChangeAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("NotifyParentOnPasswordChange")
                        .HasColumnType("boolean");

                    b.Property<int>("PasswordChangeCount")
                        .HasColumnType("integer");

                    b.Property<bool>("PasswordChangedByKid")
                        .HasColumnType("boolean");

                    b.Property<bool>("PasswordRevoked")
                        .HasColumnType("boolean");

                    b.Property<bool>("PasswordSetByParent")
                        .HasColumnType("boolean");

                    b.Property<string>("RevocationReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IndependenceDay");

                    b.HasIndex("KidAccountId")
                        .IsUnique();

                    b.ToTable("kid_password_settings");
                });

            modelBuilder.Entity("innkt.Kinder.Models.MaturityScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AgeScore")
                        .HasColumnType("integer");

                    b.Property<string>("AssessmentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AssessmentNotes")
                        .HasColumnType("text");

                    b.Property<int>("BehavioralScore")
                        .HasColumnType("integer");

                    b.Property<double>("ContentAppropriateness")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("KidAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("LevelChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ParentAssessment")
                        .HasColumnType("integer");

                    b.Property<int>("ParentRating")
                        .HasColumnType("integer");

                    b.Property<string>("PreviousLevel")
                        .HasColumnType("text");

                    b.Property<double>("ResponsibilityScore")
                        .HasColumnType("double precision");

                    b.Property<double>("SecurityAwareness")
                        .HasColumnType("double precision");

                    b.Property<double>("SocialInteraction")
                        .HasColumnType("double precision");

                    b.Property<double>("TimeManagement")
                        .HasColumnType("double precision");

                    b.Property<int>("TotalScore")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("KidAccountId");

                    b.HasIndex("TotalScore");

                    b.HasIndex("Level", "LastUpdated");

                    b.ToTable("maturity_scores");
                });

            modelBuilder.Entity("innkt.Kinder.Models.ParentApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AutoApproved")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("KidAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("ParentNotes")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequestData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SafetyFlags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("SafetyScore")
                        .HasColumnType("double precision");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TargetUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("KidAccountId", "Status");

                    b.HasIndex("ParentId", "Status");

                    b.ToTable("parent_approvals");
                });

            modelBuilder.Entity("innkt.Kinder.Models.SafetyEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AiFlags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("KidAccountId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ParentNotified")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequiresHumanReview")
                        .HasColumnType("boolean");

                    b.Property<string>("ResolutionNotes")
                        .HasColumnType("text");

                    b.Property<bool>("Resolved")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("RiskScore")
                        .HasColumnType("double precision");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventType", "CreatedAt");

                    b.HasIndex("KidAccountId", "Severity");

                    b.HasIndex("Resolved", "Severity");

                    b.ToTable("safety_events");
                });

            modelBuilder.Entity("innkt.Kinder.Models.TeacherProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("BackgroundCheckCompleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("BackgroundCheckDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("CanAccessStudentProfiles")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanAssignHomework")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanCommunicateWithParents")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanCreateStudyGroups")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EducatorLicenseNumber")
                        .HasColumnType("text");

                    b.PrimitiveCollection<string[]>("GradeLevels")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("SafetyCertifications")
                        .HasColumnType("text");

                    b.Property<string>("SchoolDistrict")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<string[]>("SubjectsTeaching")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("VerificationDocuments")
                        .HasColumnType("text");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("VerifiedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("teacher_profiles");
                });

            modelBuilder.Entity("innkt.Kinder.Models.BehaviorAssessment", b =>
                {
                    b.HasOne("innkt.Kinder.Models.KidAccount", "KidAccount")
                        .WithMany("BehaviorAssessments")
                        .HasForeignKey("KidAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KidAccount");
                });

            modelBuilder.Entity("innkt.Kinder.Models.EducationalProfile", b =>
                {
                    b.HasOne("innkt.Kinder.Models.KidAccount", "KidAccount")
                        .WithOne()
                        .HasForeignKey("innkt.Kinder.Models.EducationalProfile", "KidAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KidAccount");
                });

            modelBuilder.Entity("innkt.Kinder.Models.IndependenceTransition", b =>
                {
                    b.HasOne("innkt.Kinder.Models.KidAccount", "KidAccount")
                        .WithMany()
                        .HasForeignKey("KidAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KidAccount");
                });

            modelBuilder.Entity("innkt.Kinder.Models.KidLoginCode", b =>
                {
                    b.HasOne("innkt.Kinder.Models.KidAccount", "KidAccount")
                        .WithMany()
                        .HasForeignKey("KidAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KidAccount");
                });

            modelBuilder.Entity("innkt.Kinder.Models.KidPasswordSettings", b =>
                {
                    b.HasOne("innkt.Kinder.Models.KidAccount", "KidAccount")
                        .WithOne()
                        .HasForeignKey("innkt.Kinder.Models.KidPasswordSettings", "KidAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KidAccount");
                });

            modelBuilder.Entity("innkt.Kinder.Models.MaturityScore", b =>
                {
                    b.HasOne("innkt.Kinder.Models.KidAccount", "KidAccount")
                        .WithMany()
                        .HasForeignKey("KidAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KidAccount");
                });

            modelBuilder.Entity("innkt.Kinder.Models.ParentApproval", b =>
                {
                    b.HasOne("innkt.Kinder.Models.KidAccount", "KidAccount")
                        .WithMany("PendingApprovals")
                        .HasForeignKey("KidAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KidAccount");
                });

            modelBuilder.Entity("innkt.Kinder.Models.SafetyEvent", b =>
                {
                    b.HasOne("innkt.Kinder.Models.KidAccount", "KidAccount")
                        .WithMany("SafetyEvents")
                        .HasForeignKey("KidAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KidAccount");
                });

            modelBuilder.Entity("innkt.Kinder.Models.KidAccount", b =>
                {
                    b.Navigation("BehaviorAssessments");

                    b.Navigation("PendingApprovals");

                    b.Navigation("SafetyEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
