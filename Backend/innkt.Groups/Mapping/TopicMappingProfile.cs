using AutoMapper;
using innkt.Groups.Models;
using innkt.Groups.DTOs;

namespace innkt.Groups.Mapping;

public class TopicMappingProfile : Profile
{
    public TopicMappingProfile()
    {
        // Topic mappings
        CreateMap<Topic, TopicResponse>()
            .ForMember(dest => dest.Subgroup, opt => opt.MapFrom(src => src.Subgroup));

        CreateMap<CreateTopicRequest, Topic>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.Group, opt => opt.Ignore())
            .ForMember(dest => dest.Subgroup, opt => opt.Ignore())
            .ForMember(dest => dest.Posts, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.PausedAt, opt => opt.Ignore())
            .ForMember(dest => dest.ArchivedAt, opt => opt.Ignore())
            .ForMember(dest => dest.Status, opt => opt.MapFrom(src => "active"))
            .ForMember(dest => dest.PostsCount, opt => opt.MapFrom(src => 0));

        // Subgroup mappings
        CreateMap<Subgroup, SubgroupResponse>()
            .ForMember(dest => dest.ChildSubgroups, opt => opt.MapFrom(src => src.ChildSubgroups));

        // TopicPost mappings
        CreateMap<TopicPost, TopicPostResponse>()
            .ForMember(dest => dest.Content, opt => opt.MapFrom(src => src.Content))
            .ForMember(dest => dest.MediaUrls, opt => opt.MapFrom(src => src.MediaUrls))
            .ForMember(dest => dest.Hashtags, opt => opt.MapFrom(src => src.Hashtags))
            .ForMember(dest => dest.Mentions, opt => opt.MapFrom(src => src.Mentions))
            .ForMember(dest => dest.Location, opt => opt.MapFrom(src => src.Location))
            .ForMember(dest => dest.LikesCount, opt => opt.MapFrom(src => 0)) // This would come from Social service
            .ForMember(dest => dest.CommentsCount, opt => opt.MapFrom(src => 0)) // This would come from Social service
            .ForMember(dest => dest.IsLikedByCurrentUser, opt => opt.MapFrom(src => false)) // This would come from Social service
            .ForMember(dest => dest.Author, opt => opt.Ignore()) // This would come from Officer service
            .ForMember(dest => dest.Topic, opt => opt.Ignore());

        CreateMap<CreateTopicPostRequest, TopicPost>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.TopicId, opt => opt.Ignore())
            .ForMember(dest => dest.PostId, opt => opt.Ignore()) // This would be generated by Social service
            .ForMember(dest => dest.UserId, opt => opt.Ignore())
            .ForMember(dest => dest.KidId, opt => opt.MapFrom(src => src.KidId))
            .ForMember(dest => dest.IsParentPostingForKid, opt => opt.MapFrom(src => src.KidId.HasValue))
            .ForMember(dest => dest.IsAnnouncement, opt => opt.MapFrom(src => src.IsAnnouncement))
            .ForMember(dest => dest.IsPinned, opt => opt.MapFrom(src => false))
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.Topic, opt => opt.Ignore());

        // GroupRole mappings
        CreateMap<GroupRole, GroupRoleResponse>()
            .ForMember(dest => dest.MembersCount, opt => opt.MapFrom(src => src.Members.Count));

        CreateMap<CreateGroupRoleRequest, GroupRole>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.GroupId, opt => opt.Ignore())
            .ForMember(dest => dest.Members, opt => opt.Ignore())
            .ForMember(dest => dest.SubgroupRoles, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore());

        // Group mappings
        CreateMap<Group, GroupResponse>()
            .ForMember(dest => dest.CurrentUserRole, opt => opt.Ignore())
            .ForMember(dest => dest.IsCurrentUserMember, opt => opt.Ignore())
            .ForMember(dest => dest.Owner, opt => opt.Ignore());

        CreateMap<Group, GroupBasicInfo>()
            .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
            .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name))
            .ForMember(dest => dest.AvatarUrl, opt => opt.MapFrom(src => src.AvatarUrl))
            .ForMember(dest => dest.IsPublic, opt => opt.MapFrom(src => src.IsPublic))
            .ForMember(dest => dest.IsVerified, opt => opt.MapFrom(src => src.IsVerified))
            .ForMember(dest => dest.MembersCount, opt => opt.MapFrom(src => src.MembersCount));

        // User mappings
        CreateMap<UserBasicInfo, UserBasicInfo>()
            .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
            .ForMember(dest => dest.Username, opt => opt.MapFrom(src => src.Username))
            .ForMember(dest => dest.DisplayName, opt => opt.MapFrom(src => src.DisplayName))
            .ForMember(dest => dest.AvatarUrl, opt => opt.MapFrom(src => src.AvatarUrl))
            .ForMember(dest => dest.IsVerified, opt => opt.MapFrom(src => src.IsVerified));
    }
}
