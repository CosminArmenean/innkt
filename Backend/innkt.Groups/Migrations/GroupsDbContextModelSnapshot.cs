// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using innkt.Groups.Data;

#nullable disable

namespace innkt.Groups.Migrations
{
    [DbContext(typeof(GroupsDbContext))]
    partial class GroupsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("innkt.Groups.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowParentParticipation")
                        .HasColumnType("boolean");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CoverImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("GradeLevel")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("GroupType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("InstitutionName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsKidFriendly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<int>("MembersCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("PostsCount")
                        .HasColumnType("integer");

                    b.Property<bool>("RequireParentApproval")
                        .HasColumnType("boolean");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("GroupType");

                    b.HasIndex("IsKidFriendly");

                    b.HasIndex("IsPublic");

                    b.HasIndex("IsVerified");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups", t =>
                        {
                            t.HasCheckConstraint("CK_Group_GroupType", "\"GroupType\" IN ('general', 'educational', 'family')");
                        });
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupDocumentation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GroupId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupId1")
                        .IsUnique();

                    b.ToTable("GroupDocumentations");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("integer");

                    b.Property<string>("FileCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDownloadable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParentUploadingForKid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("KidId")
                        .HasColumnType("uuid");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UploadedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FileCategory");

                    b.HasIndex("GroupId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UploadedBy");

                    b.HasIndex("GroupId", "FileCategory");

                    b.ToTable("GroupFiles");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupFilePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDownload")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanView")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("Role");

                    b.HasIndex("FileId", "Role")
                        .IsUnique();

                    b.ToTable("GroupFilePermissions");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("InvitedByRoleAlias")
                        .HasColumnType("text");

                    b.Property<Guid?>("InvitedByRoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("InvitedByRoleName")
                        .HasColumnType("text");

                    b.Property<Guid>("InvitedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InvitedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("RealUsername")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ShowRealUsername")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("SubgroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("GroupId");

                    b.HasIndex("InvitedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("Status");

                    b.ToTable("GroupInvitations", t =>
                        {
                            t.HasCheckConstraint("CK_GroupInvitation_Status", "\"Status\" IN ('pending', 'accepted', 'rejected', 'expired')");
                        });
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedRoleId")
                        .HasColumnType("uuid");

                    b.Property<bool>("CanComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanInvite")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanPost")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanVote")
                        .HasColumnType("boolean");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParentAccount")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParentActingForKid")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("KidAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("KidId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubgroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssignedRoleId");

                    b.HasIndex("GroupId");

                    b.HasIndex("IsActive");

                    b.HasIndex("JoinedAt");

                    b.HasIndex("Role");

                    b.HasIndex("UserId");

                    b.HasIndex("GroupId", "UserId")
                        .IsUnique();

                    b.ToTable("GroupMembers", t =>
                        {
                            t.HasCheckConstraint("CK_GroupMember_Role", "\"Role\" IN ('owner', 'admin', 'moderator', 'member')");
                        });
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupPoll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowKidVoting")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowMultipleVotes")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowParentVotingForKid")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.PrimitiveCollection<string[]>("Options")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<int>("TotalVotes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("GroupId");

                    b.HasIndex("IsActive");

                    b.HasIndex("TopicId");

                    b.ToTable("GroupPolls");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAnnouncement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<string>("PostedAsRoleAlias")
                        .HasColumnType("text");

                    b.Property<Guid?>("PostedAsRoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("PostedAsRoleName")
                        .HasColumnType("text");

                    b.Property<string>("RealUsername")
                        .HasColumnType("text");

                    b.Property<bool>("ShowRealUsername")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("GroupId");

                    b.HasIndex("IsAnnouncement");

                    b.HasIndex("IsPinned");

                    b.HasIndex("PostId");

                    b.HasIndex("PostedAsRoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("GroupId", "PostId")
                        .IsUnique();

                    b.ToTable("GroupPosts");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Alias")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("CanAccessAllSubgroups")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanCreateTopics")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanManageFunds")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanManageMembers")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanManageRoles")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanManageSubgroups")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanModerateContent")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanPostAnnouncements")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanPostImages")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanPostPolls")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanPostText")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanPostVideos")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanSeeRealUsername")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanUseGrokAI")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanUsePaperScanning")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanUsePerpetualPhotos")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ShowRealUsername")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("Name");

                    b.ToTable("GroupRoles");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Details")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupId", "IsActive");

                    b.HasIndex("GroupId", "Order");

                    b.ToTable("GroupRules");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowAnonymousPosts")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowComments")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowFileSharing")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowKidPosts")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowKidVoting")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowMemberInvites")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowMemberPosts")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowParentPosts")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowReactions")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowTeacherPosts")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("EnableFundManagement")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableGrokAI")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableHomeworkTracking")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePaperScanning")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePerpetualPhotos")
                        .HasColumnType("boolean");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GroupId1")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxMembers")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPostLength")
                        .HasColumnType("integer");

                    b.Property<bool>("RequireApprovalForMembers")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequireApprovalForPosts")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequireParentApprovalForKidPosts")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .IsUnique();

                    b.HasIndex("GroupId1")
                        .IsUnique();

                    b.ToTable("GroupSettings");
                });

            modelBuilder.Entity("innkt.Groups.Models.PollVote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsParentVotingForKid")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("KidId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PollId")
                        .HasColumnType("uuid");

                    b.Property<int>("SelectedOptionIndex")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VotedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.HasIndex("UserId");

                    b.HasIndex("VotedAt");

                    b.HasIndex("PollId", "UserId")
                        .IsUnique();

                    b.ToTable("PollVotes");
                });

            modelBuilder.Entity("innkt.Groups.Models.Subgroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MembersCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ParentSubgroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("IsActive");

                    b.HasIndex("Level");

                    b.HasIndex("ParentSubgroupId");

                    b.ToTable("Subgroups");
                });

            modelBuilder.Entity("innkt.Groups.Models.SubgroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedRoleId")
                        .HasColumnType("uuid");

                    b.Property<bool>("CanManageMembers")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("boolean");

                    b.Property<Guid>("GroupMemberId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SubgroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssignedRoleId");

                    b.HasIndex("GroupMemberId");

                    b.HasIndex("SubgroupId");

                    b.HasIndex("SubgroupId", "GroupMemberId")
                        .IsUnique();

                    b.ToTable("SubgroupMembers");
                });

            modelBuilder.Entity("innkt.Groups.Models.SubgroupRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanCreateSubgroupTopics")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanManageSubgroupMembers")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanWriteInTopics")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubgroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("SubgroupId");

                    b.HasIndex("SubgroupId", "RoleId")
                        .IsUnique();

                    b.ToTable("SubgroupRoles");
                });

            modelBuilder.Entity("innkt.Groups.Models.SubgroupRoleAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AssignedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubgroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssignedByUserId");

                    b.HasIndex("IsActive");

                    b.HasIndex("RoleId");

                    b.HasIndex("SubgroupId");

                    b.HasIndex("SubgroupId", "RoleId")
                        .IsUnique();

                    b.ToTable("SubgroupRoleAssignments");
                });

            modelBuilder.Entity("innkt.Groups.Models.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowKidPosts")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowMemberPosts")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowParentPosts")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowRolePosts")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAnnouncementOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("PausedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PostsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("SubgroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("GroupId");

                    b.HasIndex("Status");

                    b.HasIndex("SubgroupId");

                    b.ToTable("Topics", t =>
                        {
                            t.HasCheckConstraint("CK_Topic_Status", "\"Status\" IN ('active', 'paused', 'archived')");
                        });
                });

            modelBuilder.Entity("innkt.Groups.Models.TopicPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.PrimitiveCollection<string[]>("Hashtags")
                        .HasColumnType("text[]");

                    b.Property<bool>("IsAnnouncement")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParentPostingForKid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("KidId")
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.PrimitiveCollection<string[]>("MediaUrls")
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<string[]>("Mentions")
                        .HasColumnType("text[]");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<string>("PostedAsRoleAlias")
                        .HasColumnType("text");

                    b.Property<Guid?>("PostedAsRoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("PostedAsRoleName")
                        .HasColumnType("text");

                    b.Property<string>("RealUsername")
                        .HasColumnType("text");

                    b.Property<bool>("ShowRealUsername")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("PostId");

                    b.HasIndex("PostedAsRoleId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.HasIndex("TopicId", "PostId")
                        .IsUnique();

                    b.ToTable("TopicPosts");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupDocumentation", b =>
                {
                    b.HasOne("innkt.Groups.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("innkt.Groups.Models.Group", null)
                        .WithOne("Documentation")
                        .HasForeignKey("innkt.Groups.Models.GroupDocumentation", "GroupId1");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupFile", b =>
                {
                    b.HasOne("innkt.Groups.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("innkt.Groups.Models.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Group");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupFilePermission", b =>
                {
                    b.HasOne("innkt.Groups.Models.GroupFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupInvitation", b =>
                {
                    b.HasOne("innkt.Groups.Models.Group", "Group")
                        .WithMany("Invitations")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupMember", b =>
                {
                    b.HasOne("innkt.Groups.Models.GroupRole", "AssignedRole")
                        .WithMany("Members")
                        .HasForeignKey("AssignedRoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("innkt.Groups.Models.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedRole");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupPoll", b =>
                {
                    b.HasOne("innkt.Groups.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("innkt.Groups.Models.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Group");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupPost", b =>
                {
                    b.HasOne("innkt.Groups.Models.Group", "Group")
                        .WithMany("GroupPosts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("innkt.Groups.Models.GroupRole", "PostedAsRole")
                        .WithMany()
                        .HasForeignKey("PostedAsRoleId");

                    b.Navigation("Group");

                    b.Navigation("PostedAsRole");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupRole", b =>
                {
                    b.HasOne("innkt.Groups.Models.Group", "Group")
                        .WithMany("Roles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupRule", b =>
                {
                    b.HasOne("innkt.Groups.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupSettings", b =>
                {
                    b.HasOne("innkt.Groups.Models.Group", "Group")
                        .WithOne()
                        .HasForeignKey("innkt.Groups.Models.GroupSettings", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("innkt.Groups.Models.Group", null)
                        .WithOne("Settings")
                        .HasForeignKey("innkt.Groups.Models.GroupSettings", "GroupId1");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("innkt.Groups.Models.PollVote", b =>
                {
                    b.HasOne("innkt.Groups.Models.GroupPoll", "Poll")
                        .WithMany("Votes")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("innkt.Groups.Models.Subgroup", b =>
                {
                    b.HasOne("innkt.Groups.Models.Group", "Group")
                        .WithMany("Subgroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("innkt.Groups.Models.Subgroup", "ParentSubgroup")
                        .WithMany("ChildSubgroups")
                        .HasForeignKey("ParentSubgroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Group");

                    b.Navigation("ParentSubgroup");
                });

            modelBuilder.Entity("innkt.Groups.Models.SubgroupMember", b =>
                {
                    b.HasOne("innkt.Groups.Models.GroupRole", "AssignedRole")
                        .WithMany()
                        .HasForeignKey("AssignedRoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("innkt.Groups.Models.GroupMember", "GroupMember")
                        .WithMany("SubgroupMemberships")
                        .HasForeignKey("GroupMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("innkt.Groups.Models.Subgroup", "Subgroup")
                        .WithMany("Members")
                        .HasForeignKey("SubgroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedRole");

                    b.Navigation("GroupMember");

                    b.Navigation("Subgroup");
                });

            modelBuilder.Entity("innkt.Groups.Models.SubgroupRole", b =>
                {
                    b.HasOne("innkt.Groups.Models.GroupRole", "Role")
                        .WithMany("SubgroupRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("innkt.Groups.Models.Subgroup", "Subgroup")
                        .WithMany()
                        .HasForeignKey("SubgroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Subgroup");
                });

            modelBuilder.Entity("innkt.Groups.Models.SubgroupRoleAssignment", b =>
                {
                    b.HasOne("innkt.Groups.Models.GroupRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("innkt.Groups.Models.Subgroup", "Subgroup")
                        .WithMany()
                        .HasForeignKey("SubgroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Subgroup");
                });

            modelBuilder.Entity("innkt.Groups.Models.Topic", b =>
                {
                    b.HasOne("innkt.Groups.Models.Group", "Group")
                        .WithMany("Topics")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("innkt.Groups.Models.Subgroup", "Subgroup")
                        .WithMany("Topics")
                        .HasForeignKey("SubgroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Group");

                    b.Navigation("Subgroup");
                });

            modelBuilder.Entity("innkt.Groups.Models.TopicPost", b =>
                {
                    b.HasOne("innkt.Groups.Models.GroupRole", "PostedAsRole")
                        .WithMany()
                        .HasForeignKey("PostedAsRoleId");

                    b.HasOne("innkt.Groups.Models.Topic", "Topic")
                        .WithMany("Posts")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostedAsRole");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("innkt.Groups.Models.Group", b =>
                {
                    b.Navigation("Documentation");

                    b.Navigation("GroupPosts");

                    b.Navigation("Invitations");

                    b.Navigation("Members");

                    b.Navigation("Roles");

                    b.Navigation("Settings");

                    b.Navigation("Subgroups");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupMember", b =>
                {
                    b.Navigation("SubgroupMemberships");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupPoll", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("innkt.Groups.Models.GroupRole", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("SubgroupRoles");
                });

            modelBuilder.Entity("innkt.Groups.Models.Subgroup", b =>
                {
                    b.Navigation("ChildSubgroups");

                    b.Navigation("Members");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("innkt.Groups.Models.Topic", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
