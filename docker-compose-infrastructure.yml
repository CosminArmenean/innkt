services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: innkt-postgres
    environment:
      POSTGRES_DB: innkt_officer
      POSTGRES_USER: admin_officer
      POSTGRES_PASSWORD: "CAvp57rt26"
      POSTGRES_MULTIPLE_DATABASES: innkt_social,innkt_groups,innkt_follow
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./Backend/innkt.Officer/init_complete.sql:/docker-entrypoint-initdb.d/01-init-complete.sql
    networks:
      - innkt-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin_officer -d innkt_officer"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: innkt-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - innkt-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB is now managed separately via docker-compose-mongodb.yml
  # This provides a proper replica set with two instances for Change Streams

  # Kafka Message Broker
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: innkt-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - innkt-network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: innkt-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - innkt-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Kafka UI (for monitoring)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: innkt-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - innkt-network

volumes:
  postgres_data:
  redis_data:
  kafka_data:

networks:
  innkt-network:
    driver: bridge
